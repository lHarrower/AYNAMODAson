// supabase/functions/ai-analysis/index.ts

import { serve } from 'https://deno.land/std@0.177.0/http/server.ts';
import { corsHeaders } from '../_shared/cors.ts';

// Cloudinary'den gelen etiketleri kendi kategorilerimize çeviren basit bir harita
const TAG_TO_CATEGORY_MAP = {
  // Alt Kategoriler
  't-shirt': { main: 'Tops', sub: 'T-shirt' },
  'shirt': { main: 'Tops', sub: 'Shirt' },
  'blouse': { main: 'Tops', sub: 'Blouse' },
  'sweater': { main: 'Tops', sub: 'Sweater' },
  'sweatshirt': { main: 'Tops', sub: 'Sweatshirt' },
  'hoodie': { main: 'Tops', sub: 'Hoodie' },
  'tank top': { main: 'Tops', sub: 'Tank Top' },
  'jeans': { main: 'Bottoms', sub: 'Jeans' },
  'pants': { main: 'Bottoms', sub: 'Pants' },
  'shorts': { main: 'Bottoms', sub: 'Shorts' },
  'skirt': { main: 'Bottoms', sub: 'Skirt' },
  'dress': { main: 'Dresses', sub: 'Dress' },
  'jumpsuit': { main: 'Dresses', sub: 'Jumpsuit' },
  // ... bu liste zenginleştirilebilir
};

serve(async (req) => {
  // Bu fonksiyonun bir parçası olarak CORS (Cross-Origin Resource Sharing) başlıklarını ekliyoruz
  if (req.method === 'OPTIONS') {
    return new Response('ok', { headers: corsHeaders });
  }

  try {
    const { imageUrl } = await req.json();
    if (!imageUrl) {
      throw new Error('imageUrl is required');
    }

    // Güvenli ortam değişkenlerinden Cloudinary URL'sini alıyoruz.
    // Bu URL, API Key ve Secret'ı içerir. Örn: cloudinary://KEY:SECRET@CLOUD_NAME
    const cloudinaryUrl = Deno.env.get('CLOUDINARY_URL');
    if (!cloudinaryUrl) {
      throw new Error('CLOUDINARY_URL is not set');
    }

    // Cloudinary'ye göndereceğimiz veriyi hazırlıyoruz.
    // AWS Rekognition eklentisini ve renk analizini kullanmasını istiyoruz.
    const formData = new FormData();
    formData.append('file', imageUrl);
    formData.append('upload_preset', 'aynamoda_preset'); // Cloudinary'de oluşturulacak bir upload preset'i
    formData.append('detection', 'aws_rek_tagging');
    formData.append('colors', 'true');

    // Cloudinary API'sini çağırıyoruz
    const cloudinaryResponse = await fetch(
      `https://api.cloudinary.com/v1_1/${Deno.env.get('CLOUDINARY_CLOUD_NAME')}/image/upload`,
      {
        method: 'POST',
        body: formData,
      }
    );
    
    if (!cloudinaryResponse.ok) {
        const errorData = await cloudinaryResponse.json();
        throw new Error(`Cloudinary API error: ${errorData.error.message}`);
    }

    const analysisResult = await cloudinaryResponse.json();
    
    // --- Analiz Sonucunu İşleme ---
    const detectedTags = analysisResult.info.detection.aws_rek_tagging.data.map(t => t.tag.toLowerCase());
    
    let mainCategory = 'Uncategorized';
    let subCategory = 'Uncategorized';

    // Eşleşen ilk etiketi bul ve kategorileri ata
    for (const tag of detectedTags) {
        if (TAG_TO_CATEGORY_MAP[tag]) {
            mainCategory = TAG_TO_CATEGORY_MAP[tag].main;
            subCategory = TAG_TO_CATEGORY_MAP[tag].sub;
            break; // İlk eşleşmeyi bulduktan sonra döngüden çık
        }
    }
    
    // Baskın Renkleri al (hex kodları olarak)
    const dominantColors = analysisResult.colors.map(color => color[0]);

    const responsePayload = {
      mainCategory,
      subCategory,
      dominantColors,
      rawTags: detectedTags, // Ham veriyi de görmek faydalı olabilir
    };

    return new Response(JSON.stringify(responsePayload), {
      headers: { ...corsHeaders, 'Content-Type': 'application/json' },
      status: 200,
    });

  } catch (error) {
    return new Response(JSON.stringify({ error: error.message }), {
      headers: { ...corsHeaders, 'Content-Type': 'application/json' },
      status: 400,
    });
  }
});